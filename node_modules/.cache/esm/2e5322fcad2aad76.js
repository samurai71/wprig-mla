/* eslint-env es6 */
'use strict';;let path,getThemeConfig,configValueDefined;_ad2‍.x([["gulpPlugins",()=>gulpPlugins],["rootPath",()=>rootPath],["gulpPath",()=>gulpPath],["gulpTestPath",()=>gulpTestPath],["isProd",()=>isProd],["prodThemePath",()=>prodThemePath],["assetsDir",()=>assetsDir],["prodAssetsDir",()=>prodAssetsDir],["PHPCSOptions",()=>PHPCSOptions],["nameFieldDefaults",()=>nameFieldDefaults],["paths",()=>paths]]);_ad2‍.w("path",[["default",["path"],function(v){path=v}]]);_ad2‍.w("./utils",[["getThemeConfig",["getThemeConfig"],function(v){getThemeConfig=v}],["configValueDefined",["configValueDefined"],function(v){configValueDefined=v}]]);

/**
 * External dependencies
 */
       const gulpPlugins = require( 'gulp-load-plugins' )();;_ad2‍.j(["gulpPlugins"]);


/**
 * Internal dependencies
 */





// Root path is where npm run commands happen
       const rootPath = process.cwd();;_ad2‍.j(["rootPath"]);

       const gulpPath = `${ rootPath }/gulp`;;_ad2‍.j(["gulpPath"]);

       const gulpTestPath = `${ rootPath }/gulp/tests`;;_ad2‍.j(["gulpTestPath"]);

// Dev or production
       const isProd = ( process.env.NODE_ENV === 'production' );;_ad2‍.j(["isProd"]);

// get the config
const config = _ad2‍.a("getThemeConfig",getThemeConfig)();

// directory for the production theme
       const prodThemePath = _ad2‍.a("path",path).normalize( `${ rootPath }/../${ config.theme.slug }` );;_ad2‍.j(["prodThemePath"]);

// directory for assets (CSS, JS, images)
       const assetsDir = `${ rootPath }/assets`;;_ad2‍.j(["assetsDir"]);

// directory for assets (CSS, JS, images) in production
       const prodAssetsDir = `${ prodThemePath }/assets`;;_ad2‍.j(["prodAssetsDir"]);

// PHPCS options
       const PHPCSOptions = {
	bin: `${ rootPath }/vendor/bin/phpcs`,
	standard: `${ rootPath }/phpcs.xml.dist`,
	warningSeverity: 0,
};;_ad2‍.j(["PHPCSOptions"]);

// Theme config name fields and their defaults
       const nameFieldDefaults = {
	author: 'The WP Rig Contributors',
	PHPNamespace: 'WP_Rig\\WP_Rig',
	slug: 'wp-rig',
	name: 'WP Rig',
	underscoreCase: 'wp_rig',
	constant: 'WP_RIG',
	camelCase: 'WpRig',
	camelCaseVar: 'wpRig',
};;_ad2‍.j(["nameFieldDefaults"]);

// Project paths
const paths = {
	assetsDir,
	browserSync: {
		dir: `${ rootPath }/BrowserSync`,
		cert: `${ rootPath }/BrowserSync/wp-rig-browser-sync-cert.crt`,
		caCert: `${ rootPath }/BrowserSync/wp-rig-browser-sync-root-cert.crt`,
		key: `${ rootPath }/BrowserSync/wp-rig-browser-sync-key.key`,
	},
	config: {
		themeConfig: `${ rootPath }/config/themeConfig.js`,
	},
	php: {
		src: [
			`${ rootPath }/**/*.php`,
			`!${ rootPath }/optional/**/*.*`,
			`!${ rootPath }/tests/**/*.*`,
			`!${ rootPath }/vendor/**/*.*`,
		],
		dest: `${ rootPath }/`,
	},
	styles: {
		editorSrc: [
			`${ assetsDir }/css/src/editor/**/*.css`,
			// Ignore partial files.
			`!${ assetsDir }/css/src/**/_*.css`,
		],
		editorSrcDir: `${ assetsDir }/css/src/editor`,
		editorDest: `${ assetsDir }/css/editor`,
		src: [
			`${ assetsDir }/css/src/**/*.css`,
			// Ignore partial files.
			`!${ assetsDir }/css/src/**/_*.css`,
			// Ignore editor source css.
			`!${ assetsDir }/css/src/editor/**/*.css`,
		],
		srcDir: `${ assetsDir }/css/src`,
		dest: `${ assetsDir }/css`,
	},
	scripts: {
		src: [
			`${ assetsDir }/js/src/**/*.js`,
			// Ignore partial files.
			`!${ assetsDir }/js/src/**/_*.js`,
		],
		srcDir: `${ assetsDir }/js/src`,
		dest: `${ assetsDir }/js`,
	},
	images: {
		src: `${ assetsDir }/images/src/**/*.{jpg,JPG,png,svg,gif,GIF}`,
		dest: `${ assetsDir }/images/`,
	},
	export: {
		src: [],
		stringReplaceSrc: [
			`${ rootPath }/style.css`,
			`${ rootPath }/languages/*.po`,
		],
	},
	languages: {
		src: [
			`${ rootPath }/**/*.php`,
			`!${ rootPath }/optional/**/*.*`,
			`!${ rootPath }/tests/**/*.*`,
			`!${ rootPath }/vendor/**/*.*`,
		],
		dest: `${ rootPath }/languages/${ nameFieldDefaults.slug }.pot`,
	},
};

// Add rootPath to filesToCopy and additionalFilesToCopy
/* eslint no-unused-vars: 0 */
const additionalFilesToCopy = _ad2‍.a("configValueDefined",configValueDefined)( 'export.additionalFilesToCopy' ) ? config.export.additionalFilesToCopy : [];
const filesToCopy = _ad2‍.a("configValueDefined",configValueDefined)( 'export.filesToCopy' ) ? config.export.filesToCopy : [];
for ( const filePath of filesToCopy.concat( additionalFilesToCopy ) ) {
	// Add the files to export src
	paths.export.src.push( `${ rootPath }/${ filePath }` );
}

// Override paths for production
if ( isProd ) {
	paths.php.dest = `${ prodThemePath }/`;
	paths.styles.dest = `${ prodAssetsDir }/css/`;
	paths.styles.editorDest = `${ prodAssetsDir }/css/editor/`;
	paths.scripts.dest = `${ prodAssetsDir }/js/`;
	paths.images.dest = `${ prodAssetsDir }/images/`;
	paths.languages = {
		src: `${ prodThemePath }/**/*.php`,
		dest: `${ prodThemePath }/languages/${ config.theme.slug }.pot`,
	};
}

;_ad2‍.j(["paths"]);
